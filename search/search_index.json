{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"microservice-py-docker Microservice with python and docker","title":"Home"},{"location":"API_Documentation/SUMMARY/","text":"api core celery config database files models oauth2 main routers auth file user backend main","title":"SUMMARY"},{"location":"API_Documentation/api/","text":"","title":"api"},{"location":"API_Documentation/api/main/","text":"Main entry point for the FastAPI application. on_startup on_startup () Event handler for application startup. Creates tables in the database. Source code in api/main.py 17 18 19 20 21 22 23 @app . on_event ( \"startup\" ) def on_startup (): \"\"\" Event handler for application startup. Creates tables in the database. \"\"\" database . create_tables () health_check health_check () Endpoint for performing health check. Returns: Type Description HealthCheck The health check response. Source code in api/main.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @app . get ( \"/healthcheck\" , tags = [ \"healthcheck\" ], response_model = models . HealthCheck , status_code = status . HTTP_200_OK , ) def health_check (): \"\"\" Endpoint for performing health check. Returns ------- models.HealthCheck The health check response. \"\"\" return models . HealthCheck ( status = \"OK\" )","title":"main"},{"location":"API_Documentation/api/main/#api.main.on_startup","text":"on_startup () Event handler for application startup. Creates tables in the database. Source code in api/main.py 17 18 19 20 21 22 23 @app . on_event ( \"startup\" ) def on_startup (): \"\"\" Event handler for application startup. Creates tables in the database. \"\"\" database . create_tables ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;on_startup"},{"location":"API_Documentation/api/main/#api.main.health_check","text":"health_check () Endpoint for performing health check. Returns: Type Description HealthCheck The health check response. Source code in api/main.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @app . get ( \"/healthcheck\" , tags = [ \"healthcheck\" ], response_model = models . HealthCheck , status_code = status . HTTP_200_OK , ) def health_check (): \"\"\" Endpoint for performing health check. Returns ------- models.HealthCheck The health check response. \"\"\" return models . HealthCheck ( status = \"OK\" )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;health_check"},{"location":"API_Documentation/api/core/","text":"","title":"core"},{"location":"API_Documentation/api/core/celery/","text":"This module is concerned with defining the Celery client that is used to send tasks to the broker queue. get_celery_client get_celery_client ( host : str = 'rabbitmq' ) -> Generator [ Celery , None , None ] get_celery_client creates a celery app that will be used to connect to the task queue Parameters: Name Type Description Default host str host of the rabbitmq broker used for the celery task queue, by default \"rabbitmq\" 'rabbitmq' Yields: Type Description Celery celery app used to send tasks to the celery task queue Source code in api/core/celery.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def get_celery_client ( host : str = \"rabbitmq\" ) -> Generator [ Celery , None , None ]: \"\"\" get_celery_client creates a celery app that will be used to connect to the task queue Parameters ---------- host : str, optional host of the rabbitmq broker used for the celery task queue, by default \"rabbitmq\" Yields ------ Celery celery app used to send tasks to the celery task queue \"\"\" client = Celery ( \"tasks\" , broker = f \"amqp:// { settings . default_user } : { settings . default_pass } @ { host } :5672/\" , backend = \"rpc://\" ) yield client client . close ()","title":"celery"},{"location":"API_Documentation/api/core/celery/#api.core.celery.get_celery_client","text":"get_celery_client ( host : str = 'rabbitmq' ) -> Generator [ Celery , None , None ] get_celery_client creates a celery app that will be used to connect to the task queue Parameters: Name Type Description Default host str host of the rabbitmq broker used for the celery task queue, by default \"rabbitmq\" 'rabbitmq' Yields: Type Description Celery celery app used to send tasks to the celery task queue Source code in api/core/celery.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def get_celery_client ( host : str = \"rabbitmq\" ) -> Generator [ Celery , None , None ]: \"\"\" get_celery_client creates a celery app that will be used to connect to the task queue Parameters ---------- host : str, optional host of the rabbitmq broker used for the celery task queue, by default \"rabbitmq\" Yields ------ Celery celery app used to send tasks to the celery task queue \"\"\" client = Celery ( \"tasks\" , broker = f \"amqp:// { settings . default_user } : { settings . default_pass } @ { host } :5672/\" , backend = \"rpc://\" ) yield client client . close ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_celery_client"},{"location":"API_Documentation/api/core/config/","text":"This module is concerned with handling settings with environment variables. Settings Bases: BaseSettings Settings summary Attributes: Name Type Description db_user str Database user name. db_password str Database password. db_host str Database host address. db_port str Database port number. db_name str Database name. secret_key str Secret key for token generation. algorithm str Algorithm used for token generation. access_token_expire_minute int Time in minutes for access token expiration. minio_root_user str The access key for MinIO. minio_root_password str The secret key for MinIO. default_user str The username for RabbitMQ. default_pass str The password for RabbitMQ. Classes: Name Description Config: Used to load values for this class from the .env file Source code in api/core/config.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Settings ( BaseSettings ): \"\"\" Settings _summary_ Attributes ---------- db_user : str Database user name. db_password : str Database password. db_host : str Database host address. db_port : str Database port number. db_name : str Database name. secret_key : str Secret key for token generation. algorithm : str Algorithm used for token generation. access_token_expire_minute : int Time in minutes for access token expiration. minio_root_user : str The access key for MinIO. minio_root_password str The secret key for MinIO. default_user : str The username for RabbitMQ. default_pass : str The password for RabbitMQ. Classes ------- Config: Used to load values for this class from the .env file \"\"\" postgres_user : str postgres_password : str postgres_host : str postgres_port : str postgres_db : str secret_key : str algorithm : str access_token_expire_minute : int minio_root_user : str minio_root_password : str default_user : str default_pass : str model_config = SettingsConfigDict ( env_file = \".env\" , env_file_encoding = \"utf-8\" )","title":"config"},{"location":"API_Documentation/api/core/config/#api.core.config.Settings","text":"Bases: BaseSettings Settings summary Attributes: Name Type Description db_user str Database user name. db_password str Database password. db_host str Database host address. db_port str Database port number. db_name str Database name. secret_key str Secret key for token generation. algorithm str Algorithm used for token generation. access_token_expire_minute int Time in minutes for access token expiration. minio_root_user str The access key for MinIO. minio_root_password str The secret key for MinIO. default_user str The username for RabbitMQ. default_pass str The password for RabbitMQ. Classes: Name Description Config: Used to load values for this class from the .env file Source code in api/core/config.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Settings ( BaseSettings ): \"\"\" Settings _summary_ Attributes ---------- db_user : str Database user name. db_password : str Database password. db_host : str Database host address. db_port : str Database port number. db_name : str Database name. secret_key : str Secret key for token generation. algorithm : str Algorithm used for token generation. access_token_expire_minute : int Time in minutes for access token expiration. minio_root_user : str The access key for MinIO. minio_root_password str The secret key for MinIO. default_user : str The username for RabbitMQ. default_pass : str The password for RabbitMQ. Classes ------- Config: Used to load values for this class from the .env file \"\"\" postgres_user : str postgres_password : str postgres_host : str postgres_port : str postgres_db : str secret_key : str algorithm : str access_token_expire_minute : int minio_root_user : str minio_root_password : str default_user : str default_pass : str model_config = SettingsConfigDict ( env_file = \".env\" , env_file_encoding = \"utf-8\" )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;Settings"},{"location":"API_Documentation/api/core/database/","text":"This module is concerned with database related operations. create_tables create_tables () -> None populates database with all tables defined in models.py Source code in api/core/database.py 14 15 16 def create_tables () -> None : \"\"\"populates database with all tables defined in models.py\"\"\" SQLModel . metadata . create_all ( engine ) get_session get_session () -> Generator [ Session , None , None ] Yields a temporary session to the database. Yields: Type Description Session A temporary session to interact with the database. Source code in api/core/database.py 19 20 21 22 23 24 25 26 27 28 29 def get_session () -> Generator [ Session , None , None ]: \"\"\" Yields a temporary session to the database. Yields ------ Session A temporary session to interact with the database. \"\"\" with Session ( engine ) as session : yield session add_user add_user ( user_create : models . UserCreate , session : Session ) -> models . User Adds a user to the database. Parameters: Name Type Description Default user_create UserCreate The data required to create a new user. required session Session The session to interact with the database. required Returns: Type Description User The user added to the database. Source code in api/core/database.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def add_user ( user_create : models . UserCreate , session : Session ) -> models . User : \"\"\" Adds a user to the database. Parameters ---------- user_create : models.UserCreate The data required to create a new user. session : Session The session to interact with the database. Returns ------- models.User The user added to the database. \"\"\" user : models . User = models . User . from_orm ( user_create ) session . add ( user ) session . commit () session . refresh ( user ) return user get_all_users get_all_users ( session : Session ) -> list [ models . User ] Retrieve all users from the database. Parameters: Name Type Description Default session Session The session to interact with the database. required Returns: Type Description list [ User ] A list of all users in the database. Source code in api/core/database.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_all_users ( session : Session ) -> list [ models . User ]: \"\"\" Retrieve all users from the database. Parameters ---------- session : Session The session to interact with the database. Returns ------- list[models.User] A list of all users in the database. \"\"\" return session . exec ( select ( models . User )) . all () get_user get_user ( email : str , session : Session ) -> models . User | None Retrieve one user from the database based on email match. Parameters: Name Type Description Default email str The email address of the user to retrieve. required session Session The session to interact with the database. required Returns: Type Description User | None The user with the specified email if found, otherwise None. Source code in api/core/database.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_user ( email : str , session : Session ) -> models . User | None : \"\"\" Retrieve one user from the database based on email match. Parameters ---------- email : str The email address of the user to retrieve. session : Session The session to interact with the database. Returns ------- models.User | None The user with the specified email if found, otherwise None. \"\"\" return session . exec ( select ( models . User ) . where ( models . User . email == email )) . first ()","title":"database"},{"location":"API_Documentation/api/core/database/#api.core.database.create_tables","text":"create_tables () -> None populates database with all tables defined in models.py Source code in api/core/database.py 14 15 16 def create_tables () -> None : \"\"\"populates database with all tables defined in models.py\"\"\" SQLModel . metadata . create_all ( engine )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;create_tables"},{"location":"API_Documentation/api/core/database/#api.core.database.get_session","text":"get_session () -> Generator [ Session , None , None ] Yields a temporary session to the database. Yields: Type Description Session A temporary session to interact with the database. Source code in api/core/database.py 19 20 21 22 23 24 25 26 27 28 29 def get_session () -> Generator [ Session , None , None ]: \"\"\" Yields a temporary session to the database. Yields ------ Session A temporary session to interact with the database. \"\"\" with Session ( engine ) as session : yield session","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_session"},{"location":"API_Documentation/api/core/database/#api.core.database.add_user","text":"add_user ( user_create : models . UserCreate , session : Session ) -> models . User Adds a user to the database. Parameters: Name Type Description Default user_create UserCreate The data required to create a new user. required session Session The session to interact with the database. required Returns: Type Description User The user added to the database. Source code in api/core/database.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def add_user ( user_create : models . UserCreate , session : Session ) -> models . User : \"\"\" Adds a user to the database. Parameters ---------- user_create : models.UserCreate The data required to create a new user. session : Session The session to interact with the database. Returns ------- models.User The user added to the database. \"\"\" user : models . User = models . User . from_orm ( user_create ) session . add ( user ) session . commit () session . refresh ( user ) return user","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;add_user"},{"location":"API_Documentation/api/core/database/#api.core.database.get_all_users","text":"get_all_users ( session : Session ) -> list [ models . User ] Retrieve all users from the database. Parameters: Name Type Description Default session Session The session to interact with the database. required Returns: Type Description list [ User ] A list of all users in the database. Source code in api/core/database.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_all_users ( session : Session ) -> list [ models . User ]: \"\"\" Retrieve all users from the database. Parameters ---------- session : Session The session to interact with the database. Returns ------- list[models.User] A list of all users in the database. \"\"\" return session . exec ( select ( models . User )) . all ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_all_users"},{"location":"API_Documentation/api/core/database/#api.core.database.get_user","text":"get_user ( email : str , session : Session ) -> models . User | None Retrieve one user from the database based on email match. Parameters: Name Type Description Default email str The email address of the user to retrieve. required session Session The session to interact with the database. required Returns: Type Description User | None The user with the specified email if found, otherwise None. Source code in api/core/database.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_user ( email : str , session : Session ) -> models . User | None : \"\"\" Retrieve one user from the database based on email match. Parameters ---------- email : str The email address of the user to retrieve. session : Session The session to interact with the database. Returns ------- models.User | None The user with the specified email if found, otherwise None. \"\"\" return session . exec ( select ( models . User ) . where ( models . User . email == email )) . first ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_user"},{"location":"API_Documentation/api/core/files/","text":"This module is concerned with functions and objects related to file handling. get_minio_client get_minio_client ( host : str = 'minio' ) -> Minio get_minio_client creates and returns a client that can connect with the minIO Parameters: Name Type Description Default host str host to connect client to, by default \"minio\" 'minio' Returns: Type Description Minio client to interact with minIO service Source code in api/core/files.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_minio_client ( host : str = \"minio\" ) -> Minio : \"\"\" get_minio_client creates and returns a client that can connect with the minIO Parameters ---------- host : str, optional host to connect client to, by default \"minio\" Returns ------- Minio client to interact with minIO service \"\"\" client = Minio ( f \" { host } :9000\" , access_key = settings . minio_root_user , secret_key = settings . minio_root_password , secure = False , # Set to True if you use HTTPS. ) # Make a bucket if it doesn't already exist. found = client . bucket_exists ( BUCKET ) if not found : client . make_bucket ( BUCKET ) return client get_file_size async get_file_size ( file : UploadFile ) -> int get_file_size calculates the size of an uploaded file. This is required as the minIO client put_object method requires the length of the object being uploaded as one of the parameters. Parameters: Name Type Description Default file UploadFile file of supported file type that user uploads required Returns: Type Description int size of the uploaded file Source code in api/core/files.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 async def get_file_size ( file : UploadFile ) -> int : \"\"\" get_file_size calculates the size of an uploaded file. This is required as the minIO client put_object method requires the length of the object being uploaded as one of the parameters. Parameters ---------- file : UploadFile file of supported file type that user uploads Returns ------- int size of the uploaded file \"\"\" # Seek to the end of the file to get the file size file . file . seek ( 0 , 2 ) # Move the cursor to the end of the file file_size = file . file . tell () file . file . seek ( 0 , 0 ) # Move the cursor to the start of the file return file_size","title":"files"},{"location":"API_Documentation/api/core/files/#api.core.files.get_minio_client","text":"get_minio_client ( host : str = 'minio' ) -> Minio get_minio_client creates and returns a client that can connect with the minIO Parameters: Name Type Description Default host str host to connect client to, by default \"minio\" 'minio' Returns: Type Description Minio client to interact with minIO service Source code in api/core/files.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_minio_client ( host : str = \"minio\" ) -> Minio : \"\"\" get_minio_client creates and returns a client that can connect with the minIO Parameters ---------- host : str, optional host to connect client to, by default \"minio\" Returns ------- Minio client to interact with minIO service \"\"\" client = Minio ( f \" { host } :9000\" , access_key = settings . minio_root_user , secret_key = settings . minio_root_password , secure = False , # Set to True if you use HTTPS. ) # Make a bucket if it doesn't already exist. found = client . bucket_exists ( BUCKET ) if not found : client . make_bucket ( BUCKET ) return client","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_minio_client"},{"location":"API_Documentation/api/core/files/#api.core.files.get_file_size","text":"get_file_size ( file : UploadFile ) -> int get_file_size calculates the size of an uploaded file. This is required as the minIO client put_object method requires the length of the object being uploaded as one of the parameters. Parameters: Name Type Description Default file UploadFile file of supported file type that user uploads required Returns: Type Description int size of the uploaded file Source code in api/core/files.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 async def get_file_size ( file : UploadFile ) -> int : \"\"\" get_file_size calculates the size of an uploaded file. This is required as the minIO client put_object method requires the length of the object being uploaded as one of the parameters. Parameters ---------- file : UploadFile file of supported file type that user uploads Returns ------- int size of the uploaded file \"\"\" # Seek to the end of the file to get the file size file . file . seek ( 0 , 2 ) # Move the cursor to the end of the file file_size = file . file . tell () file . file . seek ( 0 , 0 ) # Move the cursor to the start of the file return file_size","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_file_size"},{"location":"API_Documentation/api/core/models/","text":"This module is concerned with creating models used for both table creation and data validation. The classes with table=True are used to define tables that will be created in the database. The rest of the classes are used for schema validation: They are used to control what data the api endpoints can receive and return. If the data doesn't match the schema at either end of the api journey then an error will occur. Note : Plain SQLModels effectively act as Pydantic Models UserBase Bases: SQLModel Represents the base attributes of a user. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. Source code in api/core/models.py 19 20 21 22 23 24 25 26 27 28 29 30 class UserBase ( SQLModel ): \"\"\" Represents the base attributes of a user. Attributes ---------- email : EmailStr The email address of the user. It should be unique. \"\"\" email : EmailStr = Field ( unique = True , index = True , sa_type = AutoString ) User Bases: UserBase Represents a user entity, inheriting from UserBase. Attributes: Name Type Description id Optional [ int ] The unique identifier of the user. It is a primary key. password str The hashed password of the user. created_at Optional [ datetime ] The datetime when the user account was created. Defaults to the current UTC time. Source code in api/core/models.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class User ( UserBase , table = True ): # type: ignore \"\"\" Represents a user entity, inheriting from UserBase. Attributes ---------- id : Optional[int] The unique identifier of the user. It is a primary key. password : str The hashed password of the user. created_at : Optional[datetime] The datetime when the user account was created. Defaults to the current UTC time. \"\"\" id : Optional [ int ] = Field ( default = None , primary_key = True ) password : str created_at : Optional [ datetime ] = Field ( default_factory = datetime . utcnow , nullable = False ) UserCreate Bases: UserBase Represents the data required to create a new user. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. password str The plaintext password of the user. Source code in api/core/models.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class UserCreate ( UserBase ): \"\"\" Represents the data required to create a new user. Attributes ---------- email : EmailStr The email address of the user. It should be unique. password : str The plaintext password of the user. \"\"\" password : str UserRead Bases: UserBase Represents the data of a user to be read. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. created_at datetime The datetime when the user account was created. Source code in api/core/models.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class UserRead ( UserBase ): \"\"\" Represents the data of a user to be read. Attributes ---------- email : EmailStr The email address of the user. It should be unique. created_at : datetime The datetime when the user account was created. \"\"\" created_at : datetime UserLogin Bases: UserCreate Represents the data required for user login, inheriting from UserCreate. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. password str The plaintext password of the user. Source code in api/core/models.py 85 86 87 88 89 90 91 92 93 94 95 96 class UserLogin ( UserCreate ): \"\"\" Represents the data required for user login, inheriting from UserCreate. Attributes ---------- email : EmailStr The email address of the user. It should be unique. password : str The plaintext password of the user. \"\"\" Token Bases: SQLModel Represents a token entity returned when a user requests one. Attributes: Name Type Description access_token str The access token string. token_type str The type of the token. Source code in api/core/models.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 class Token ( SQLModel ): \"\"\" Represents a token entity returned when a user requests one. Attributes ---------- access_token : str The access token string. token_type : str The type of the token. \"\"\" access_token : str token_type : str HealthCheck Bases: BaseModel Response model to validate and return when performing a health check. Attributes: Name Type Description status str The status of the health check. Default value is \"OK\". Source code in api/core/models.py 116 117 118 119 120 121 122 123 124 125 126 127 class HealthCheck ( BaseModel ): \"\"\" Response model to validate and return when performing a health check. Attributes ---------- status : str The status of the health check. Default value is \"OK\". \"\"\" status : str = \"OK\" UploadedFile Bases: BaseModel Response model to return when file is uploaded. Attributes: Name Type Description filename str The name of the uploaded file. size int The size of the uploaded file. content_type str The content type of the uploaded file. status str The status of the uploaded file. Source code in api/core/models.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 class UploadedFile ( BaseModel ): \"\"\" Response model to return when file is uploaded. Attributes ---------- filename : str The name of the uploaded file. size : int The size of the uploaded file. content_type : str The content type of the uploaded file. status : str The status of the uploaded file. \"\"\" filename : str size : int content_type : str status : str","title":"models"},{"location":"API_Documentation/api/core/models/#api.core.models.UserBase","text":"Bases: SQLModel Represents the base attributes of a user. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. Source code in api/core/models.py 19 20 21 22 23 24 25 26 27 28 29 30 class UserBase ( SQLModel ): \"\"\" Represents the base attributes of a user. Attributes ---------- email : EmailStr The email address of the user. It should be unique. \"\"\" email : EmailStr = Field ( unique = True , index = True , sa_type = AutoString )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UserBase"},{"location":"API_Documentation/api/core/models/#api.core.models.User","text":"Bases: UserBase Represents a user entity, inheriting from UserBase. Attributes: Name Type Description id Optional [ int ] The unique identifier of the user. It is a primary key. password str The hashed password of the user. created_at Optional [ datetime ] The datetime when the user account was created. Defaults to the current UTC time. Source code in api/core/models.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class User ( UserBase , table = True ): # type: ignore \"\"\" Represents a user entity, inheriting from UserBase. Attributes ---------- id : Optional[int] The unique identifier of the user. It is a primary key. password : str The hashed password of the user. created_at : Optional[datetime] The datetime when the user account was created. Defaults to the current UTC time. \"\"\" id : Optional [ int ] = Field ( default = None , primary_key = True ) password : str created_at : Optional [ datetime ] = Field ( default_factory = datetime . utcnow , nullable = False )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;User"},{"location":"API_Documentation/api/core/models/#api.core.models.UserCreate","text":"Bases: UserBase Represents the data required to create a new user. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. password str The plaintext password of the user. Source code in api/core/models.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class UserCreate ( UserBase ): \"\"\" Represents the data required to create a new user. Attributes ---------- email : EmailStr The email address of the user. It should be unique. password : str The plaintext password of the user. \"\"\" password : str","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UserCreate"},{"location":"API_Documentation/api/core/models/#api.core.models.UserRead","text":"Bases: UserBase Represents the data of a user to be read. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. created_at datetime The datetime when the user account was created. Source code in api/core/models.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class UserRead ( UserBase ): \"\"\" Represents the data of a user to be read. Attributes ---------- email : EmailStr The email address of the user. It should be unique. created_at : datetime The datetime when the user account was created. \"\"\" created_at : datetime","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UserRead"},{"location":"API_Documentation/api/core/models/#api.core.models.UserLogin","text":"Bases: UserCreate Represents the data required for user login, inheriting from UserCreate. Attributes: Name Type Description email EmailStr The email address of the user. It should be unique. password str The plaintext password of the user. Source code in api/core/models.py 85 86 87 88 89 90 91 92 93 94 95 96 class UserLogin ( UserCreate ): \"\"\" Represents the data required for user login, inheriting from UserCreate. Attributes ---------- email : EmailStr The email address of the user. It should be unique. password : str The plaintext password of the user. \"\"\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UserLogin"},{"location":"API_Documentation/api/core/models/#api.core.models.Token","text":"Bases: SQLModel Represents a token entity returned when a user requests one. Attributes: Name Type Description access_token str The access token string. token_type str The type of the token. Source code in api/core/models.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 class Token ( SQLModel ): \"\"\" Represents a token entity returned when a user requests one. Attributes ---------- access_token : str The access token string. token_type : str The type of the token. \"\"\" access_token : str token_type : str","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;Token"},{"location":"API_Documentation/api/core/models/#api.core.models.HealthCheck","text":"Bases: BaseModel Response model to validate and return when performing a health check. Attributes: Name Type Description status str The status of the health check. Default value is \"OK\". Source code in api/core/models.py 116 117 118 119 120 121 122 123 124 125 126 127 class HealthCheck ( BaseModel ): \"\"\" Response model to validate and return when performing a health check. Attributes ---------- status : str The status of the health check. Default value is \"OK\". \"\"\" status : str = \"OK\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;HealthCheck"},{"location":"API_Documentation/api/core/models/#api.core.models.UploadedFile","text":"Bases: BaseModel Response model to return when file is uploaded. Attributes: Name Type Description filename str The name of the uploaded file. size int The size of the uploaded file. content_type str The content type of the uploaded file. status str The status of the uploaded file. Source code in api/core/models.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 class UploadedFile ( BaseModel ): \"\"\" Response model to return when file is uploaded. Attributes ---------- filename : str The name of the uploaded file. size : int The size of the uploaded file. content_type : str The content type of the uploaded file. status : str The status of the uploaded file. \"\"\" filename : str size : int content_type : str status : str","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;UploadedFile"},{"location":"API_Documentation/api/core/oauth2/","text":"This module is concerned with authentication and security related operations. create_access_token create_access_token ( data : dict ) -> str Creates a JWT token that will later be used by users to authenticate their requests. Parameters: Name Type Description Default data dict The payload data to be encoded into the token. required Returns: Type Description str The encoded JWT token. Source code in api/core/oauth2.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def create_access_token ( data : dict ) -> str : \"\"\" Creates a JWT token that will later be used by users to authenticate their requests. Parameters ---------- data : dict The payload data to be encoded into the token. Returns ------- str The encoded JWT token. \"\"\" to_encode = data . copy () expire = datetime . datetime . now ( datetime . UTC ) + timedelta ( minutes = settings . access_token_expire_minute ) to_encode . update ({ \"exp\" : expire }) return jwt . encode ( to_encode , settings . secret_key , algorithm = settings . algorithm ) verify_access_token verify_access_token ( token : str , credentials_exception : HTTPException ) Verifies a JWT token has been encrypted using the application's secret key, has the expected data in the payload, and hasn't expired yet. Parameters: Name Type Description Default token str The JWT token to be verified. required credentials_exception HTTPException The exception to be raised if credentials cannot be validated. required Raises: Type Description HTTPException If the token cannot be decoded or does not contain the expected user ID, raises the provided credentials exception. Returns: Type Description str The user ID extracted from the token payload. Source code in api/core/oauth2.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def verify_access_token ( token : str , credentials_exception : HTTPException ): \"\"\" Verifies a JWT token has been encrypted using the application's secret key, has the expected data in the payload, and hasn't expired yet. Parameters ---------- token : str The JWT token to be verified. credentials_exception : HTTPException The exception to be raised if credentials cannot be validated. Raises ------ HTTPException If the token cannot be decoded or does not contain the expected user ID, raises the provided credentials exception. Returns ------- str The user ID extracted from the token payload. \"\"\" try : payload = jwt . decode ( token , settings . secret_key , algorithms = [ settings . algorithm ]) _id = payload . get ( \"user\" ) if _id is None : raise credentials_exception except JWTError as e : raise credentials_exception from e return _id get_current_user get_current_user ( token : Annotated [ str , Depends ( oauth2_scheme )], session : Annotated [ Session , Depends ( database . get_session )]) -> models . User | None Gets the current user by verifying the JWT token passed and using its payload data to query the users database for a corresponding user. Parameters: Name Type Description Default token str The JWT token used for authentication (default is obtained from oauth2_scheme ). required session Session The session to interact with the database (default is obtained from database.get_session ). required Raises: Type Description HTTPException If credentials cannot be validated, returns status code 401 (UNAUTHORIZED) with a detail message. The response header contains the WWW-Authenticate field set to 'Bearer'. Returns: Type Description User | None The user corresponding to the provided token, if found; otherwise, returns None. Source code in api/core/oauth2.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_current_user ( token : Annotated [ str , Depends ( oauth2_scheme )], session : Annotated [ Session , Depends ( database . get_session )], ) -> models . User | None : \"\"\" Gets the current user by verifying the JWT token passed and using its payload data to query the users database for a corresponding user. Parameters ---------- token : str The JWT token used for authentication (default is obtained from `oauth2_scheme`). session : Session The session to interact with the database (default is obtained from `database.get_session`). Raises ------ HTTPException If credentials cannot be validated, returns status code 401 (UNAUTHORIZED) with a detail message. The response header contains the WWW-Authenticate field set to 'Bearer'. Returns ------- models.User | None The user corresponding to the provided token, if found; otherwise, returns None. \"\"\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) _id = verify_access_token ( token , credentials_exception ) return session . exec ( select ( models . User ) . where ( models . User . id == _id )) . first () hash_password hash_password ( password : str ) -> str Hashes plain text password. Parameters: Name Type Description Default password str The plaintext password to be hashed. required Returns: Type Description str The hashed password. Source code in api/core/oauth2.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def hash_password ( password : str ) -> str : \"\"\" Hashes plain text password. Parameters ---------- password : str The plaintext password to be hashed. Returns ------- str The hashed password. \"\"\" return pwd_context . hash ( password ) verify_password verify_password ( plain_password : str , hashed_password : str ) -> bool Verify plaintext password against hashed password in the database. Parameters: Name Type Description Default plain_password str The plaintext password to be verified. required hashed_password str The hashed password stored in the database. required Returns: Type Description bool True if the plaintext password matches the hashed password; otherwise, False. Source code in api/core/oauth2.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def verify_password ( plain_password : str , hashed_password : str ) -> bool : \"\"\" Verify plaintext password against hashed password in the database. Parameters ---------- plain_password : str The plaintext password to be verified. hashed_password : str The hashed password stored in the database. Returns ------- bool True if the plaintext password matches the hashed password; otherwise, False. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"oauth2"},{"location":"API_Documentation/api/core/oauth2/#api.core.oauth2.create_access_token","text":"create_access_token ( data : dict ) -> str Creates a JWT token that will later be used by users to authenticate their requests. Parameters: Name Type Description Default data dict The payload data to be encoded into the token. required Returns: Type Description str The encoded JWT token. Source code in api/core/oauth2.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def create_access_token ( data : dict ) -> str : \"\"\" Creates a JWT token that will later be used by users to authenticate their requests. Parameters ---------- data : dict The payload data to be encoded into the token. Returns ------- str The encoded JWT token. \"\"\" to_encode = data . copy () expire = datetime . datetime . now ( datetime . UTC ) + timedelta ( minutes = settings . access_token_expire_minute ) to_encode . update ({ \"exp\" : expire }) return jwt . encode ( to_encode , settings . secret_key , algorithm = settings . algorithm )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;create_access_token"},{"location":"API_Documentation/api/core/oauth2/#api.core.oauth2.verify_access_token","text":"verify_access_token ( token : str , credentials_exception : HTTPException ) Verifies a JWT token has been encrypted using the application's secret key, has the expected data in the payload, and hasn't expired yet. Parameters: Name Type Description Default token str The JWT token to be verified. required credentials_exception HTTPException The exception to be raised if credentials cannot be validated. required Raises: Type Description HTTPException If the token cannot be decoded or does not contain the expected user ID, raises the provided credentials exception. Returns: Type Description str The user ID extracted from the token payload. Source code in api/core/oauth2.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def verify_access_token ( token : str , credentials_exception : HTTPException ): \"\"\" Verifies a JWT token has been encrypted using the application's secret key, has the expected data in the payload, and hasn't expired yet. Parameters ---------- token : str The JWT token to be verified. credentials_exception : HTTPException The exception to be raised if credentials cannot be validated. Raises ------ HTTPException If the token cannot be decoded or does not contain the expected user ID, raises the provided credentials exception. Returns ------- str The user ID extracted from the token payload. \"\"\" try : payload = jwt . decode ( token , settings . secret_key , algorithms = [ settings . algorithm ]) _id = payload . get ( \"user\" ) if _id is None : raise credentials_exception except JWTError as e : raise credentials_exception from e return _id","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;verify_access_token"},{"location":"API_Documentation/api/core/oauth2/#api.core.oauth2.get_current_user","text":"get_current_user ( token : Annotated [ str , Depends ( oauth2_scheme )], session : Annotated [ Session , Depends ( database . get_session )]) -> models . User | None Gets the current user by verifying the JWT token passed and using its payload data to query the users database for a corresponding user. Parameters: Name Type Description Default token str The JWT token used for authentication (default is obtained from oauth2_scheme ). required session Session The session to interact with the database (default is obtained from database.get_session ). required Raises: Type Description HTTPException If credentials cannot be validated, returns status code 401 (UNAUTHORIZED) with a detail message. The response header contains the WWW-Authenticate field set to 'Bearer'. Returns: Type Description User | None The user corresponding to the provided token, if found; otherwise, returns None. Source code in api/core/oauth2.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_current_user ( token : Annotated [ str , Depends ( oauth2_scheme )], session : Annotated [ Session , Depends ( database . get_session )], ) -> models . User | None : \"\"\" Gets the current user by verifying the JWT token passed and using its payload data to query the users database for a corresponding user. Parameters ---------- token : str The JWT token used for authentication (default is obtained from `oauth2_scheme`). session : Session The session to interact with the database (default is obtained from `database.get_session`). Raises ------ HTTPException If credentials cannot be validated, returns status code 401 (UNAUTHORIZED) with a detail message. The response header contains the WWW-Authenticate field set to 'Bearer'. Returns ------- models.User | None The user corresponding to the provided token, if found; otherwise, returns None. \"\"\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) _id = verify_access_token ( token , credentials_exception ) return session . exec ( select ( models . User ) . where ( models . User . id == _id )) . first ()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_current_user"},{"location":"API_Documentation/api/core/oauth2/#api.core.oauth2.hash_password","text":"hash_password ( password : str ) -> str Hashes plain text password. Parameters: Name Type Description Default password str The plaintext password to be hashed. required Returns: Type Description str The hashed password. Source code in api/core/oauth2.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def hash_password ( password : str ) -> str : \"\"\" Hashes plain text password. Parameters ---------- password : str The plaintext password to be hashed. Returns ------- str The hashed password. \"\"\" return pwd_context . hash ( password )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;hash_password"},{"location":"API_Documentation/api/core/oauth2/#api.core.oauth2.verify_password","text":"verify_password ( plain_password : str , hashed_password : str ) -> bool Verify plaintext password against hashed password in the database. Parameters: Name Type Description Default plain_password str The plaintext password to be verified. required hashed_password str The hashed password stored in the database. required Returns: Type Description bool True if the plaintext password matches the hashed password; otherwise, False. Source code in api/core/oauth2.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def verify_password ( plain_password : str , hashed_password : str ) -> bool : \"\"\" Verify plaintext password against hashed password in the database. Parameters ---------- plain_password : str The plaintext password to be verified. hashed_password : str The hashed password stored in the database. Returns ------- bool True if the plaintext password matches the hashed password; otherwise, False. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;verify_password"},{"location":"API_Documentation/api/routers/","text":"","title":"routers"},{"location":"API_Documentation/api/routers/auth/","text":"This module defines a router for the api that is dedicated to authentication. login login ( user_credentials : Annotated [ OAuth2PasswordRequestForm , Depends ()], session : Annotated [ Session , Depends ( database . get_session )]) Endpoint for user login. Returns a JWT token upon successful authentication. Parameters: Name Type Description Default user_credentials OAuth2PasswordRequestForm The user's credentials (username and password) obtained from the request. required session Session The session to interact with the database. required Raises: Type Description HTTPException If the credentials are invalid, raises status code 403 (FORBIDDEN) with appropriate detail. Returns: Type Description Token The JWT token and its type upon successful authentication. Source code in api/routers/auth.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @router . post ( \"/login\" , response_model = models . Token ) def login ( user_credentials : Annotated [ OAuth2PasswordRequestForm , Depends ()], session : Annotated [ Session , Depends ( database . get_session )], ): \"\"\" Endpoint for user login. Returns a JWT token upon successful authentication. Parameters ---------- user_credentials : OAuth2PasswordRequestForm The user's credentials (username and password) obtained from the request. session : Session The session to interact with the database. Raises ------ HTTPException If the credentials are invalid, raises status code 403 (FORBIDDEN) with appropriate detail. Returns ------- models.Token The JWT token and its type upon successful authentication. \"\"\" user = database . get_user ( user_credentials . username , session ) if not user : raise HTTPException ( status_code = status . HTTP_403_FORBIDDEN , detail = \"Invalid Credentials\" ) password_matching = oauth2 . verify_password ( user_credentials . password , user . password ) if not password_matching : raise HTTPException ( status_code = status . HTTP_403_FORBIDDEN , detail = \"Invalid Credentials\" ) access_token = oauth2 . create_access_token ( data = { \"user\" : user . id }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" }","title":"auth"},{"location":"API_Documentation/api/routers/auth/#api.routers.auth.login","text":"login ( user_credentials : Annotated [ OAuth2PasswordRequestForm , Depends ()], session : Annotated [ Session , Depends ( database . get_session )]) Endpoint for user login. Returns a JWT token upon successful authentication. Parameters: Name Type Description Default user_credentials OAuth2PasswordRequestForm The user's credentials (username and password) obtained from the request. required session Session The session to interact with the database. required Raises: Type Description HTTPException If the credentials are invalid, raises status code 403 (FORBIDDEN) with appropriate detail. Returns: Type Description Token The JWT token and its type upon successful authentication. Source code in api/routers/auth.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @router . post ( \"/login\" , response_model = models . Token ) def login ( user_credentials : Annotated [ OAuth2PasswordRequestForm , Depends ()], session : Annotated [ Session , Depends ( database . get_session )], ): \"\"\" Endpoint for user login. Returns a JWT token upon successful authentication. Parameters ---------- user_credentials : OAuth2PasswordRequestForm The user's credentials (username and password) obtained from the request. session : Session The session to interact with the database. Raises ------ HTTPException If the credentials are invalid, raises status code 403 (FORBIDDEN) with appropriate detail. Returns ------- models.Token The JWT token and its type upon successful authentication. \"\"\" user = database . get_user ( user_credentials . username , session ) if not user : raise HTTPException ( status_code = status . HTTP_403_FORBIDDEN , detail = \"Invalid Credentials\" ) password_matching = oauth2 . verify_password ( user_credentials . password , user . password ) if not password_matching : raise HTTPException ( status_code = status . HTTP_403_FORBIDDEN , detail = \"Invalid Credentials\" ) access_token = oauth2 . create_access_token ( data = { \"user\" : user . id }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" }","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;login"},{"location":"API_Documentation/api/routers/file/","text":"This module defines a router for the api that is dedicated to file related responsibilities. upload_file async upload_file ( file : UploadFile , current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], minio_client : Annotated [ files . Minio , Depends ( files . get_minio_client )], celery_client : Annotated [ celery . Celery , Depends ( celery . get_celery_client )]) Endpoint for uploading files. Parameters: Name Type Description Default file UploadFile The file to be uploaded. required current_user User The current authenticated user. required minio_client Minio The MinIO client for interacting with the object storage. required celery_client Celery The Celery client for queuing tasks. required Returns: Type Description dict A dictionary containing file metadata and status. Raises: Type Description HTTPException If the file type is not supported or if there are errors during file upload or queuing. Source code in api/routers/file.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 @router . post ( \"/\" , response_model = models . UploadedFile , status_code = status . HTTP_201_CREATED ) async def upload_file ( file : UploadFile , current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], minio_client : Annotated [ files . Minio , Depends ( files . get_minio_client )], celery_client : Annotated [ celery . Celery , Depends ( celery . get_celery_client )], ): \"\"\" Endpoint for uploading files. Parameters ---------- file : UploadFile The file to be uploaded. current_user : models.User The current authenticated user. minio_client : files.Minio The MinIO client for interacting with the object storage. celery_client : celery.Celery The Celery client for queuing tasks. Returns ------- dict A dictionary containing file metadata and status. Raises ------ HTTPException If the file type is not supported or if there are errors during file upload or queuing. \"\"\" if file . content_type != \"text/plain\" : raise HTTPException ( status_code = status . HTTP_415_UNSUPPORTED_MEDIA_TYPE , detail = f \"File type of { file . content_type } is not a supported media type of text/plain\" , ) file_size = await files . get_file_size ( file ) try : minio_client . put_object ( files . BUCKET , f \" { current_user . id } / { file . filename } \" , file . file , file_size ) except S3Error as e : logging . exception () raise HTTPException ( status_code = status . HTTP_500_INTERNAL_SERVER_ERROR , detail = \"Error uploading file.\" , ) from e try : # send file meta-data and user id to task queue task = celery_client . send_task ( name = \"process_file\" , args = [ current_user . id , file . filename , file . content_type ], ) except TaskError as e : logging . exception () raise HTTPException ( status_code = status . HTTP_500_INTERNAL_SERVER_ERROR , detail = \"Error queueing file process\" , ) from e return { \"filename\" : file . filename , \"content_type\" : file . content_type , \"size\" : file_size , \"status\" : task . status , }","title":"file"},{"location":"API_Documentation/api/routers/file/#api.routers.file.upload_file","text":"upload_file ( file : UploadFile , current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], minio_client : Annotated [ files . Minio , Depends ( files . get_minio_client )], celery_client : Annotated [ celery . Celery , Depends ( celery . get_celery_client )]) Endpoint for uploading files. Parameters: Name Type Description Default file UploadFile The file to be uploaded. required current_user User The current authenticated user. required minio_client Minio The MinIO client for interacting with the object storage. required celery_client Celery The Celery client for queuing tasks. required Returns: Type Description dict A dictionary containing file metadata and status. Raises: Type Description HTTPException If the file type is not supported or if there are errors during file upload or queuing. Source code in api/routers/file.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 @router . post ( \"/\" , response_model = models . UploadedFile , status_code = status . HTTP_201_CREATED ) async def upload_file ( file : UploadFile , current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], minio_client : Annotated [ files . Minio , Depends ( files . get_minio_client )], celery_client : Annotated [ celery . Celery , Depends ( celery . get_celery_client )], ): \"\"\" Endpoint for uploading files. Parameters ---------- file : UploadFile The file to be uploaded. current_user : models.User The current authenticated user. minio_client : files.Minio The MinIO client for interacting with the object storage. celery_client : celery.Celery The Celery client for queuing tasks. Returns ------- dict A dictionary containing file metadata and status. Raises ------ HTTPException If the file type is not supported or if there are errors during file upload or queuing. \"\"\" if file . content_type != \"text/plain\" : raise HTTPException ( status_code = status . HTTP_415_UNSUPPORTED_MEDIA_TYPE , detail = f \"File type of { file . content_type } is not a supported media type of text/plain\" , ) file_size = await files . get_file_size ( file ) try : minio_client . put_object ( files . BUCKET , f \" { current_user . id } / { file . filename } \" , file . file , file_size ) except S3Error as e : logging . exception () raise HTTPException ( status_code = status . HTTP_500_INTERNAL_SERVER_ERROR , detail = \"Error uploading file.\" , ) from e try : # send file meta-data and user id to task queue task = celery_client . send_task ( name = \"process_file\" , args = [ current_user . id , file . filename , file . content_type ], ) except TaskError as e : logging . exception () raise HTTPException ( status_code = status . HTTP_500_INTERNAL_SERVER_ERROR , detail = \"Error queueing file process\" , ) from e return { \"filename\" : file . filename , \"content_type\" : file . content_type , \"size\" : file_size , \"status\" : task . status , }","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;upload_file"},{"location":"API_Documentation/api/routers/user/","text":"This module defines router for the api that is dedicated to user related responsibilities. create_user create_user ( user_create : models . UserCreate , session : Annotated [ Session , Depends ( database . get_session )]) Endpoint for creating a new user. Parameters: Name Type Description Default user_create UserCreate The data required to create a new user. required session Session The session to interact with the database. required Returns: Type Description UserRead The created user data to be read. Raises: Type Description HTTPException If a user with the same email already exists, raises status code 409 (CONFLICT). Source code in api/routers/user.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @router . post ( \"/\" , response_model = models . UserRead , status_code = status . HTTP_201_CREATED ) def create_user ( user_create : models . UserCreate , session : Annotated [ Session , Depends ( database . get_session )], ): \"\"\" Endpoint for creating a new user. Parameters ---------- user_create : models.UserCreate The data required to create a new user. session : Session The session to interact with the database. Returns ------- models.UserRead The created user data to be read. Raises ------ HTTPException If a user with the same email already exists, raises status code 409 (CONFLICT). \"\"\" user_exists = database . get_user ( user_create . email , session ) if user_exists : raise HTTPException ( status_code = status . HTTP_409_CONFLICT , detail = f \"User with email: { user_create . email } already exists\" , ) user_create . password = oauth2 . hash_password ( user_create . password ) return database . add_user ( user_create , session ) get_users get_users ( session : Annotated [ Session , Depends ( database . get_session )], current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )]) Endpoint for retrieving all users. Parameters: Name Type Description Default session Session The session to interact with the database. required current_user User The current authenticated user. required Returns: Type Description list [ UserRead ] A list of user data to be read. Source code in api/routers/user.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @router . get ( \"/\" , response_model = list [ models . UserRead ]) def get_users ( session : Annotated [ Session , Depends ( database . get_session )], current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], # noqa: ARG001 ): \"\"\" Endpoint for retrieving all users. Parameters ---------- session : Session The session to interact with the database. current_user : models.User The current authenticated user. Returns ------- list[models.UserRead] A list of user data to be read. \"\"\" return database . get_all_users ( session )","title":"user"},{"location":"API_Documentation/api/routers/user/#api.routers.user.create_user","text":"create_user ( user_create : models . UserCreate , session : Annotated [ Session , Depends ( database . get_session )]) Endpoint for creating a new user. Parameters: Name Type Description Default user_create UserCreate The data required to create a new user. required session Session The session to interact with the database. required Returns: Type Description UserRead The created user data to be read. Raises: Type Description HTTPException If a user with the same email already exists, raises status code 409 (CONFLICT). Source code in api/routers/user.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @router . post ( \"/\" , response_model = models . UserRead , status_code = status . HTTP_201_CREATED ) def create_user ( user_create : models . UserCreate , session : Annotated [ Session , Depends ( database . get_session )], ): \"\"\" Endpoint for creating a new user. Parameters ---------- user_create : models.UserCreate The data required to create a new user. session : Session The session to interact with the database. Returns ------- models.UserRead The created user data to be read. Raises ------ HTTPException If a user with the same email already exists, raises status code 409 (CONFLICT). \"\"\" user_exists = database . get_user ( user_create . email , session ) if user_exists : raise HTTPException ( status_code = status . HTTP_409_CONFLICT , detail = f \"User with email: { user_create . email } already exists\" , ) user_create . password = oauth2 . hash_password ( user_create . password ) return database . add_user ( user_create , session )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;create_user"},{"location":"API_Documentation/api/routers/user/#api.routers.user.get_users","text":"get_users ( session : Annotated [ Session , Depends ( database . get_session )], current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )]) Endpoint for retrieving all users. Parameters: Name Type Description Default session Session The session to interact with the database. required current_user User The current authenticated user. required Returns: Type Description list [ UserRead ] A list of user data to be read. Source code in api/routers/user.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @router . get ( \"/\" , response_model = list [ models . UserRead ]) def get_users ( session : Annotated [ Session , Depends ( database . get_session )], current_user : Annotated [ models . User , Depends ( oauth2 . get_current_user )], # noqa: ARG001 ): \"\"\" Endpoint for retrieving all users. Parameters ---------- session : Session The session to interact with the database. current_user : models.User The current authenticated user. Returns ------- list[models.UserRead] A list of user data to be read. \"\"\" return database . get_all_users ( session )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;get_users"},{"location":"API_Documentation/backend/main/","text":"","title":"main"}]}